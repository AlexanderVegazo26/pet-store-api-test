name: Performance Tests

permissions:
  contents: write
  pages: write
  id-token: write

on:
  push:
    branches: ["main"]
    paths:
      - "api-test-performance/**"
      - ".github/workflows/performance-test.yml"
  workflow_dispatch:
    inputs:
      test_type:
        description: "Test suite to run"
        required: true
        default: "all"
        type: choice
        options:
          - all
          - pet
          - store
          - user
      debug:
        description: "Run in debug mode"
        required: false
        type: boolean
        default: false

jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    env:
      REPORT_PATH: ""

    steps:
      - name: Checkout Test Repository
        uses: actions/checkout@v4

      - name: Checkout Swagger Petstore
        uses: actions/checkout@v4
        with:
          repository: swagger-api/swagger-petstore
          path: swagger-petstore

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: "8"
          distribution: "temurin"
          cache: "maven"

      - name: Build & Start Petstore
        run: |
          cd swagger-petstore
          mvn clean package -DskipTests
          docker build -t swaggerapi/petstore3:unstable .
          docker run --name swaggerapi-petstore3 -d -p 8080:8080 swaggerapi/petstore3:unstable
          timeout 60 bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' http://localhost:8080/api/v3/openapi.json)" != "200" ]]; do sleep 5; done' || false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Install Dependencies
        working-directory: ./api-test-performance
        run: npm ci

      - name: Set Test Configuration
        working-directory: ./api-test-performance
        run: |
          echo "# Pet simulation variables
          PET_RAMP_DURATION=5
          CREATE_PETS=10
          READ_PETS=20

          # Store simulation variables
          ORDER_RAMP_DURATION=5
          CREATE_ORDERS=10
          READ_ORDERS=20
          DELETE_ORDERS=5
          READ_INVENTORY=15

          # User simulation variables
          USER_RAMP_DURATION=5
          CREATE_USERS=10
          READ_USERS=20
          UPDATE_USERS=8
          DELETE_USERS=5
          AUTH_USERS=25" > .env

          while IFS= read -r line || [[ -n "$line" ]]; do
            if [[ ! "$line" =~ ^#.*$ ]] && [[ ! -z "$line" ]]; then
              echo "$line" >> $GITHUB_ENV
            fi
          done < .env

      - name: Run Performance Tests
        working-directory: ./api-test-performance
        run: |
          source .env
          if [[ "${{ github.event.inputs.test_type }}" == "pet" ]]; then
            npm run pet-simulation
          elif [[ "${{ github.event.inputs.test_type }}" == "store" ]]; then
            npm run store-simulation
          elif [[ "${{ github.event.inputs.test_type }}" == "user" ]]; then
            npm run user-simulation
          else
            npm run all-simulations
          fi

      - name: Prepare Report Directory
        id: prepare_report
        run: |
          # Create the base directory structure
          mkdir -p gh-pages/api-test-performance

          # Find and sort simulation directories in reverse order (newest first)
          SIMS=$(find "api-test-performance/target/gatling" -maxdepth 1 -type d -name "jssimulation-*" | sort -r)

          if [ -z "$SIMS" ]; then
            echo "Error: No simulation directories found"
            exit 1
          fi

          # Create an array to store simulation names
          declare -a sim_names

          # Create the index.html file header
          cat > gh-pages/api-test-performance/index.html << EOF
          <!DOCTYPE html>
          <html>
          <head>
            <title>Performance Test Reports</title>
            <style>
              body { font-family: Arial, sans-serif; margin: 40px; }
              h1 { color: #333; }
              ul { list-style-type: none; padding: 0; }
              li { margin: 10px 0; }
              a { color: #0366d6; text-decoration: none; }
              a:hover { text-decoration: underline; }
              .timestamp { 
                color: #666;
                font-size: 0.9em;
                margin-left: 10px;
              }
            </style>
          </head>
          <body>
            <h1>Performance Test Reports</h1>
            <ul>
          EOF

          # Process each simulation directory
          for sim in $SIMS; do
            SIM_NAME=$(basename "$sim")
            # Copy the simulation directory
            cp -r "$sim" "gh-pages/api-test-performance/"
            sim_names+=("$SIM_NAME")
            
            # Extract timestamp for display
            TIMESTAMP=$(echo $SIM_NAME | grep -o "[0-9]\{14\}")
            FORMATTED_TIME=$(date -d "${TIMESTAMP:0:8} ${TIMESTAMP:8:2}:${TIMESTAMP:10:2}:${TIMESTAMP:12:2}" "+%H:%M:%S")

            # Determine simulation type from simulation.log
            if grep -q "createPet\|findPetsByStatus" "$sim/simulation.log" 2>/dev/null; then
              DISPLAY_NAME="Pet"
            elif grep -q "placeOrder\|getInventory" "$sim/simulation.log" 2>/dev/null; then
              DISPLAY_NAME="Store"
            elif grep -q "createUser\|loginUser" "$sim/simulation.log" 2>/dev/null; then
              DISPLAY_NAME="User"
            else
              DISPLAY_NAME="Unknown"
            fi

            # Add entry to index.html with clean name and timestamp
            echo "<li><a href='./${SIM_NAME}/index.html'>${DISPLAY_NAME}</a><span class='timestamp'>${FORMATTED_TIME}</span></li>" >> gh-pages/api-test-performance/index.html
          done

          # Close the HTML file
          echo "</ul></body></html>" >> gh-pages/api-test-performance/index.html

          # Save the first simulation name for the Print Report URL step
          echo "simulation_name=${sim_names[0]}" >> "$GITHUB_OUTPUT"
          echo "All simulations processed successfully"

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload Pages Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: gh-pages

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Print Report URLs
        run: |
          echo "Performance Test Reports will be available at:"
          echo "Main index: https://alexandervegazo26.github.io/pet-store-api-test/api-test-performance/"
          echo "Latest report: https://alexandervegazo26.github.io/pet-store-api-test/api-test-performance/${{ steps.prepare_report.outputs.simulation_name }}"

      - name: Wait for GitHub Pages
        run: sleep 30

      - name: Cleanup
        if: always()
        run: |
          docker stop swaggerapi-petstore3 || true
          docker rm swaggerapi-petstore3 || true
          docker image rm swaggerapi/petstore3:unstable || true
          docker system prune -f

concurrency:
  group: "petstore-${{ github.ref }}"
  cancel-in-progress: false
