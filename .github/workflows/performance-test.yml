name: Performance Tests

permissions:
  contents: write
  pages: write
  id-token: write

on:
  push:
    branches: ["main"]
  workflow_dispatch:
    inputs:
      test_type:
        description: "Test suite to run"
        required: true
        default: "all"
        type: choice
        options:
          - all
          - pet
          - store
          - user
      debug:
        description: "Run in debug mode"
        required: false
        type: boolean
        default: false

jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    env:
      REPORT_PATH: ""

    steps:
      - name: Checkout Test Repository
        uses: actions/checkout@v4

      - name: Checkout Swagger Petstore
        uses: actions/checkout@v4
        with:
          repository: swagger-api/swagger-petstore
          path: swagger-petstore

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: "8"
          distribution: "temurin"
          cache: "maven"

      - name: Build & Start Petstore
        run: |
          cd swagger-petstore
          mvn clean package -DskipTests
          docker build -t swaggerapi/petstore3:unstable .
          docker run --name swaggerapi-petstore3 -d -p 8080:8080 swaggerapi/petstore3:unstable
          timeout 60 bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' http://localhost:8080/api/v3/openapi.json)" != "200" ]]; do sleep 5; done' || false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Install Dependencies
        working-directory: ./api-test-performance
        run: npm ci

      - name: Set Test Configuration
        working-directory: ./api-test-performance
        run: |
          echo "# Pet simulation variables
          PET_RAMP_DURATION=5
          CREATE_PETS=10
          READ_PETS=20

          # Store simulation variables
          ORDER_RAMP_DURATION=5
          CREATE_ORDERS=10
          READ_ORDERS=20
          DELETE_ORDERS=5
          READ_INVENTORY=15

          # User simulation variables
          USER_RAMP_DURATION=5
          CREATE_USERS=10
          READ_USERS=20
          UPDATE_USERS=8
          DELETE_USERS=5
          AUTH_USERS=25" > .env

          # Make environment variables available
          while IFS= read -r line || [[ -n "$line" ]]; do
            if [[ ! "$line" =~ ^#.*$ ]] && [[ ! -z "$line" ]]; then
              echo "$line" >> $GITHUB_ENV
            fi
          done < .env

      - name: Run Performance Tests
        working-directory: ./api-test-performance
        run: |
          source .env
          if [[ "${{ github.event.inputs.test_type }}" == "pet" ]]; then
            npm run pet-simulation
          elif [[ "${{ github.event.inputs.test_type }}" == "store" ]]; then
            npm run store-simulation
          elif [[ "${{ github.event.inputs.test_type }}" == "user" ]]; then
            npm run user-simulation
          else
            npm run all-simulations
          fi

      - name: Prepare Report Directory
        id: prepare_report
        run: |
          # Create the base directory structure
          mkdir -p gh-pages/api-test-performance

          # Find the latest simulation directory
          LATEST_SIM=$(find "api-test-performance/target/gatling" -maxdepth 1 -type d -name "jssimulation-*" | sort -r | head -n 1)

          if [ -z "$LATEST_SIM" ]; then
            echo "Error: No simulation directory found"
            exit 1
          fi

          # Get the simulation name
          SIM_NAME=$(basename "$LATEST_SIM")
          echo "Latest simulation: $SIM_NAME"

          # Copy the entire simulation directory to the performance test directory
          cp -r "$LATEST_SIM" "gh-pages/api-test-performance/"

          # Verify the copy
          if [ ! -f "gh-pages/api-test-performance/$SIM_NAME/index.html" ]; then
            echo "Error: Report files not copied correctly"
            exit 1
          fi

          echo "Prepared directory structure:"
          ls -R gh-pages/api-test-performance

          # Save the simulation name for the Print Report URL step
          echo "simulation_name=$SIM_NAME" >> "$GITHUB_OUTPUT"

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload Pages Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: gh-pages

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Print Report URL
        run: |
          echo "Performance Test Report will be available at:"
          echo "https://alexandervegazo26.github.io/pet-store-api-test/api-test-performance/${{ steps.prepare_report.outputs.simulation_name }}"

      - name: Wait for GitHub Pages
        run: sleep 30

      - name: Cleanup
        if: always()
        run: |
          docker stop swaggerapi-petstore3 || true
          docker rm swaggerapi-petstore3 || true
          docker image rm swaggerapi/petstore3:unstable || true
          docker system prune -f

concurrency:
  group: "petstore-${{ github.ref }}"
  cancel-in-progress: false
