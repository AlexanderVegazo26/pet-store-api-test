name: Functional Tests

permissions:
  contents: write
  pages: write
  id-token: write

on:
  push:
    branches: ["main"]
    paths:
      - "api-test-automation/**"
      - ".github/workflows/functional-tests.yml"
      - ".github/config.yml"
  workflow_dispatch:
    inputs:
      test_type:
        description: "Test suite to run"
        required: true
        default: "all"
        type: choice
        options:
          - all
          - pet
          - store
          - user
      environment:
        description: "Target environment for tests"
        required: true
        default: "ci"
        type: choice
        options:
          - ci
      debug:
        description: "Run in debug mode"
        required: false
        type: boolean
        default: false

jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Checkout Test Repository
        uses: actions/checkout@v4

      - name: Install YQ
        uses: mikefarah/yq@master
        with:
          cmd: --version

      - name: Load Environment Configuration
        id: config
        run: |
          CONFIG_PATH=".github/config.yml"
          if [ ! -f "$CONFIG_PATH" ]; then
            echo "Error: Configuration file not found at $CONFIG_PATH"
            exit 1
          fi

          ENV="${{ github.event.inputs.environment || 'ci' }}"

          echo "API_PROTOCOL=$(yq eval ".environments.${ENV}.api.protocol" $CONFIG_PATH)" >> $GITHUB_ENV
          echo "API_HOST=$(yq eval ".environments.${ENV}.api.host" $CONFIG_PATH)" >> $GITHUB_ENV
          echo "API_PORT=$(yq eval ".environments.${ENV}.api.port" $CONFIG_PATH)" >> $GITHUB_ENV
          echo "API_BASE_PATH=$(yq eval ".environments.${ENV}.api.base_path" $CONFIG_PATH)" >> $GITHUB_ENV
          echo "HEALTH_ENDPOINT=$(yq eval ".environments.${ENV}.api.health_endpoint" $CONFIG_PATH)" >> $GITHUB_ENV
          echo "TIMEOUT_SECONDS=$(yq eval ".environments.${ENV}.test.timeout_seconds" $CONFIG_PATH)" >> $GITHUB_ENV
          echo "HEALTH_CHECK_INTERVAL=$(yq eval ".environments.${ENV}.test.health_check_interval" $CONFIG_PATH)" >> $GITHUB_ENV

          API_URL="$(yq eval ".environments.${ENV}.api.protocol" $CONFIG_PATH)://$(yq eval ".environments.${ENV}.api.host" $CONFIG_PATH):$(yq eval ".environments.${ENV}.api.port" $CONFIG_PATH)$(yq eval ".environments.${ENV}.api.base_path" $CONFIG_PATH)"
          echo "API_URL=${API_URL}" >> $GITHUB_ENV

          HEALTH_CHECK_URL="${API_URL}$(yq eval ".environments.${ENV}.api.health_endpoint" $CONFIG_PATH)"
          echo "HEALTH_CHECK_URL=${HEALTH_CHECK_URL}" >> $GITHUB_ENV

      - name: Checkout Swagger Petstore
        uses: actions/checkout@v4
        with:
          repository: swagger-api/swagger-petstore
          path: swagger-petstore

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: "8"
          distribution: "temurin"
          cache: "maven"

      - name: Build & Start Petstore
        run: |
          cd swagger-petstore
          mvn clean package -DskipTests
          docker build -t swaggerapi/petstore3:unstable .
          docker run --name swaggerapi-petstore3 -d -p ${{ env.API_PORT }}:8080 swaggerapi/petstore3:unstable
          timeout ${{ env.TIMEOUT_SECONDS }} bash -c \
            'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' ${{ env.HEALTH_CHECK_URL }})" != "200" ]]; \
            do sleep ${{ env.HEALTH_CHECK_INTERVAL }}; done' || false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Install Dependencies
        working-directory: ./api-test-automation
        run: |
          npm ci
          npx playwright install --with-deps

      - name: Build
        working-directory: ./api-test-automation
        env:
          NODE_OPTIONS: "-r tsconfig-paths/register"
        run: |
          echo "API_URL=${{ env.API_URL }}" > .env
          npm run build
          echo "Checking compiled files:"
          ls -la dist/src/api || true
          ls -la dist/tests || true

      - name: Run API Tests
        working-directory: ./api-test-automation
        env:
          NODE_OPTIONS: "-r tsconfig-paths/register"
        run: |
          rm -rf playwright-report
          mkdir playwright-report
          npm run test

      - name: Prepare Report Directory
        id: prepare_report
        run: |
          mkdir -p gh-pages/api-test-automation
          TIMESTAMP=$(date +"%Y%m%d_%H%M%S")

          cat > gh-pages/api-test-automation/index.html << EOF
          <!DOCTYPE html>
          <html>
          <head>
              <title>API Test Automation Reports</title>
              <style>
                  body { 
                      font-family: Arial, sans-serif; 
                      margin: 40px;
                      line-height: 1.6;
                  }
                  h1 { 
                      color: #333;
                      border-bottom: 2px solid #eee;
                      padding-bottom: 10px;
                  }
                  .latest-report {
                      margin: 20px 0;
                      padding: 20px;
                      background-color: #f8f9fa;
                      border-radius: 8px;
                      border: 1px solid #e9ecef;
                  }
                  .timestamp {
                      color: #666;
                      font-size: 0.9em;
                      margin-left: 10px;
                  }
                  a {
                      color: #0366d6;
                      text-decoration: none;
                      font-weight: 500;
                  }
                  a:hover {
                      text-decoration: underline;
                  }
              </style>
          </head>
          <body>
              <h1>API Test Automation Reports</h1>
              <div class="latest-report">
                  <h2>Latest Test Results <span class="timestamp">${TIMESTAMP}</span></h2>
                  <p><a href="./report/index.html">View Detailed Test Report â†’</a></p>
              </div>
          </body>
          </html>
          EOF

          mkdir -p gh-pages/api-test-automation/report
          if [ -d "api-test-automation/playwright-report" ]; then
              cp -r api-test-automation/playwright-report/* gh-pages/api-test-automation/report/
              echo "Report files copied successfully"
          else
              echo "Error: Playwright report directory not found"
              ls -la api-test-automation/
              exit 1
          fi

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload Pages Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: gh-pages

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Print Report URLs
        run: |
          echo "API Test Automation Reports will be available at:"
          echo "Main index: https://alexandervegazo26.github.io/pet-store-api-test/api-test-automation/"
          echo "Latest report: https://alexandervegazo26.github.io/pet-store-api-test/api-test-automation/report/"

      - name: Wait for GitHub Pages
        run: sleep 30

      - name: Cleanup
        if: always()
        run: |
          docker stop swaggerapi-petstore3 || true
          docker rm swaggerapi-petstore3 || true
          docker image rm swaggerapi/petstore3:unstable || true
          docker system prune -f

concurrency:
  group: "petstore-${{ github.ref }}"
  cancel-in-progress: false
